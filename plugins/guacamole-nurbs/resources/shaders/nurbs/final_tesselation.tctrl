@include "resources/shaders/common/header.glsl" 
                                                          
///////////////////////////////////////////////////////////////////////////////
// input
///////////////////////////////////////////////////////////////////////////////                                                            
flat in vec3  vertex_position[];                        
flat in uint  vertex_index[];                           
flat in vec2  vertex_tessCoord[];  
flat in float vertex_final_tesselation[];           

///////////////////////////////////////////////////////////////////////////////
// output
///////////////////////////////////////////////////////////////////////////////                                                               
layout(vertices = 4) out;               

flat out uint tcIndex[];                          
flat out vec2 tcTessCoord[];   

///////////////////////////////////////////////////////////////////////////////
// uniforms
///////////////////////////////////////////////////////////////////////////////                                                            
uniform samplerBuffer parameter_texture;    
uniform samplerBuffer attribute_texture;    
uniform samplerBuffer obb_texture;       

uniform float gua_tesselation_max_error;   
uniform float gua_max_pre_tesselation;
                                                          
uniform float gua_texel_width;                    
uniform float gua_texel_height;                   

@include "resources/shaders/nurbs/parametrization_uniforms.glsl"
@include "resources/glsl/common/obb_area.glsl"   
@include "resources/shaders/nurbs/patch_attribute_ssbo.glsl"
@include "resources/shaders/common/gua_camera_uniforms.glsl"   
            
///////////////////////////////////////////////////////////////////////////////
// functions
///////////////////////////////////////////////////////////////////////////////                        
@include "resources/glsl/math/horner_surface.glsl.frag"

@include "resources/shaders/nurbs/detail/to_screen_space.glsl"
@include "resources/shaders/nurbs/detail/edge_length.glsl"
@include "resources/shaders/nurbs/detail/control_polygon_length.glsl"
@include "resources/shaders/nurbs/detail/edge_tess_level.glsl"
@include "resources/shaders/nurbs/detail/inner_tess_level.glsl"
@include "resources/shaders/nurbs/detail/is_inside.glsl"
@include "resources/shaders/nurbs/detail/frustum_cull.glsl"

           

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
void main()                                                                                                               
{                                                                                                                         
  tcIndex[gl_InvocationID]     = vertex_index[gl_InvocationID];                                                                                           
  tcTessCoord[gl_InvocationID] = vertex_tessCoord[gl_InvocationID];                                                                                       
                                                                                                                                  
  mat4 mvp_matrix = gua_projection_matrix * gua_model_view_matrix;                                           
                        
  int surface_index   = 0;
  int surface_order_u = 0;
  int surface_order_v = 0;
  retrieve_patch_data(int(vertex_index[gl_InvocationID]), surface_index, surface_order_u, surface_order_v);

  vec4 curve_factor = clamp(retrieve_patch_distance(int(vertex_index[gl_InvocationID])), 1, 4);

  vec4 bboxmin, bboxmax;
  retrieve_patch_bbox(int(vertex_index[gl_InvocationID]), bboxmin, bboxmax);

  float final_tess_level = vertex_final_tesselation[0];

  gl_TessLevelInner[0] = clamp(final_tess_level, 1.0, 64.0);
  gl_TessLevelOuter[1] = clamp(final_tess_level, 1.0, 64.0);
  gl_TessLevelOuter[3] = clamp(final_tess_level, 1.0, 64.0);
  gl_TessLevelInner[1] = clamp(final_tess_level, 1.0, 64.0);
  gl_TessLevelOuter[0] = clamp(final_tess_level, 1.0, 64.0);
  gl_TessLevelOuter[2] = clamp(final_tess_level, 1.0, 64.0);                                                                                                                
}           