@include "resources/shaders/common/header.glsl"           
         
///////////////////////////////////////////////////////////////////////////////                                         
// input
///////////////////////////////////////////////////////////////////////////////
layout(quads, equal_spacing, ccw) in;               
                                                            
in vec3  control_position[];                         
in uint  control_index[];                            
in vec2  control_tesscoord[];                        
        
        
///////////////////////////////////////////////////////////////////////////////
// output
///////////////////////////////////////////////////////////////////////////////                                                            
out vec3 eval_position;                           
out uint eval_index;                              
out vec2 eval_tesscoord;                          
         
///////////////////////////////////////////////////////////////////////////////                                                   
// uniforms                                         
///////////////////////////////////////////////////////////////////////////////
@include "resources/shaders/common/gua_camera_uniforms.glsl"                  
                                                            
uniform samplerBuffer parameter_texture;            
uniform samplerBuffer attribute_texture;     


///////////////////////////////////////////////////////////////////////////////
// functions
///////////////////////////////////////////////////////////////////////////////
@include "resources/glsl/math/horner_surface.glsl.frag"


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
void main()                                                            
{                                                                      
  vec2 p1 = mix(control_tesscoord[0].xy, control_tesscoord[1].xy, gl_TessCoord.x); 
  vec2 p2 = mix(control_tesscoord[3].xy, control_tesscoord[2].xy, gl_TessCoord.x); 
  vec2 uv = clamp(mix(p1, p2, gl_TessCoord.y), 0.0, 1.0);              
                                                                               
  vec4 data = texelFetch(attribute_texture, int(control_index[0]) * 5);      
  uint surface_index   = floatBitsToUint(data.x);                      
  uint surface_order_u = floatBitsToUint(data.y);                      
  uint surface_order_v = floatBitsToUint(data.z);                      
                                                                               
  vec4 puv, du, dv;                                                    
  evaluateSurface(parameter_texture,                                   
                  int(surface_index),                                  
                  int(surface_order_u),                                
                  int(surface_order_v),                                
                  uv,                                                  
                  puv);                                                
                                                                               
  eval_position  = puv.xyz;                                               
  eval_index     = control_index[0];                                            
  eval_tesscoord = uv;                                                    
}  