{
  "vertex_methods" :
  [],

  "fragment_methods" :
  [

    {
      "name" : "CalculateDistortionForVT",
      "source" : "


//layout(binding = 2) uniform usampler2D hierarchical_idx_textures;


layout(std430, binding = 0) buffer out_lod_feedback { int out_lod_feedback_values[]; };
layout(std430, binding = 1) buffer out_count_feedback { uint out_count_feedback_values[]; };

layout(std140, binding = 2) uniform physical_texture_address { uvec2 pt_address; };
layout(std140, binding = 3) uniform virtual_texture_addresses { uvec2 vt_addresses[]; };

    	const int tile_size = 256;
      const bool enable_hierarchy = true;

      const int max_level = 9;
      const vec2 tile_padding = vec2(1.0, 1.0);
      const uvec2 physical_texture_dim = uvec2(32, 32);


struct idx_tex_positions
{
    int parent_lvl;
    uvec4 parent_idx;
    int child_lvl;
    uvec4 child_idx;
};


/*
* Physical texture lookup
*/
vec4 get_physical_texture_color(uvec4 index_quadruple, vec2 texture_sampling_coordinates, uint current_level)
{
    // exponent for calculating the occupied pixels in our index texture, based on which level the tile is in
    uint tile_occupation_exponent = (max_level-1) - current_level;

    // 2^tile_occupation_exponent defines how many pixel (of the index texture) are used by the given tile
    uint occupied_index_pixel_per_dimension = uint(1 << tile_occupation_exponent);

    // offset represented as tiles is divided by total num tiles per axis
    // (replace max_width_tiles later by correct uniform)
    // extracting x,y from index texture
    uvec2 base_xy_offset = index_quadruple.xy;

    // base x,y coordinates * number of tiles / number of used index texture pixel
    // taking the factional part by modf
    vec2 physical_tile_ratio_xy = fract(texture_sampling_coordinates * (1 << (max_level-1) ) / vec2(occupied_index_pixel_per_dimension));

    // Use only tile_size - 2*tile_padding pixels to render scene
    // Therefore, scale reduced tile size to full size and translate it
    vec2 padding_scale = 1 - 2 * tile_padding / tile_size;
    vec2 padding_offset = tile_padding / tile_size;


    // adding the ratio for every texel to our base offset to get the right pixel in our tile
    // and dividing it by the dimension of the phy. tex.
    vec2 physical_texture_coordinates = (base_xy_offset.xy + physical_tile_ratio_xy * padding_scale + padding_offset) / physical_texture_dim;

    // outputting the calculated coordinate from our physical texture
    vec4 c = texture(sampler2DArray(pt_address), vec3(physical_texture_coordinates, index_quadruple.z));

    //return vec4(noise(physical_texture_coordinates.xy*1001));

    //return vec4(physical_texture_coordinates.xy, 1.0, 1.0);
    //vec4 c = texture(layered_physical_texture, vec3(gua_quad_coords, index_quadruple.z));


    return c;
}

/*
* Fill the feedback buffer with the feedback value for a given tile.
* Here, we use the maximum lod required from the rendered tile.
*/
void update_feedback(int feedback_value, uvec4 base_offset)
{
    uint one_d_feedback_ssbo_index = base_offset.x + base_offset.y * physical_texture_dim.x + base_offset.z * physical_texture_dim.x * physical_texture_dim.y;

    //atomicMax(out_lod_feedback_values[one_d_feedback_ssbo_index], feedback_value);
    int prev = out_lod_feedback_values[one_d_feedback_ssbo_index];
    out_lod_feedback_values[one_d_feedback_ssbo_index] = max(prev, feedback_value);
    //atomicAdd(out_count_feedback_values[one_d_feedback_ssbo_index], 1);
}

vec4 mix_colors(idx_tex_positions positions, int desired_level, vec2 texture_coordinates, float mix_ratio)
{
    vec4 child_color = get_physical_texture_color(positions.child_idx, texture_coordinates, positions.child_lvl);
    vec4 parent_color = get_physical_texture_color(positions.parent_idx, texture_coordinates, positions.parent_lvl);

    //return enable_hierarchy == true ?
    //    mix(parent_color, child_color, mix_ratio) : child_color;

    return mix(parent_color, child_color, mix_ratio);
}

vec4 traverse_idx_hierarchy(float lambda, vec2 texture_coordinates)
{
    float mix_ratio = fract(lambda);
    int desired_level = int(ceil(lambda))*3;

    //desired_level = 0;

    idx_tex_positions positions;

    vec4 c = vec4(0.0, 0.0, 0.0, 1.0);
 
    // Desired level can be negative when the dxdy-fct requests a coarser representation as of the root tile size
    if(desired_level <= 0)
    {

        //return vec4(1.0, 0.0, 0.0, 0.0);

        uvec4 idx_pos = textureLod(usampler2D(vt_addresses[0]), texture_coordinates, max_level).rgba;
        positions = idx_tex_positions(0, idx_pos, 0, idx_pos);



    }
    else
    {

        //return vec4(0.0, 1.0, 0.0, 0.0);
        // Go from desired tree level downwards to root until a loaded tile is found
        for(int i = desired_level; i >= 0; --i)
        {
            c += vec4(0.1, 0.1, 0.1, 0.0);
            uvec4 idx_child_pos = textureLod(usampler2D(vt_addresses[0]), texture_coordinates, max_level-(i) ).rgba;

            // check if the requested tile is loaded and if we are not at the root level
            // enables to mix (linearly interpolate) between hierarchy levels
            if(idx_child_pos.w == 1 && i >= 1)
            {
                uvec4 idx_parent_pos = textureLod(usampler2D(vt_addresses[0]), texture_coordinates, max_level-(i-1) ).rgba;
                positions = idx_tex_positions(i-1, idx_parent_pos, i, idx_child_pos);
                break;
            }

            // we are down to the root level: we cannot take the parent node from the root node;
            // therefore, we use the root node as child as well as parent for mixing
            else if(idx_child_pos.w == 1 && i == 0)
            {
                positions = idx_tex_positions(0, idx_child_pos, 0, idx_child_pos);
                break;
            }
        }
    }

    
    {
        c = mix_colors(positions, desired_level, texture_coordinates, mix_ratio);
    }

    if( int(gl_FragCoord.x) % 128 == 0 && int(gl_FragCoord.y) % 128 == 0 ) {
      int feedback_value = desired_level;
      update_feedback(feedback_value, positions.child_idx);
  }

    return c;
}


        float dxdy()
        {
            vec2 c = gua_uvs.xy * tile_size;

            float dFdxCx = dFdx(c.x);
            float dFdxCy = dFdx(c.y);

            float dFdyCx = dFdy(c.x);
            float dFdyCy = dFdy(c.y);

            float rho = max( sqrt( dFdxCx*dFdxCx + dFdxCy*dFdxCy ),
                             sqrt( dFdyCx*dFdyCx + dFdyCy*dFdyCy ));

            float lambda = log2(rho);

            return lambda;
        }

        void CalculateDistortionForVT() {

          float lambda = -dxdy();

          gua_uvs.z = lambda;

          gua_roughness = 1.0;

	        //gua_emissivity = textureLod(usampler2D(wappen_vt),  gua_uvs.xy, 0).r;


          ///////////////////////////////////
          gua_color = vec3(1.0, 0.0, 0.0);


          vec3 uv_lambda_triple  = vec3(gua_uvs.xy, lambda);
          vec2 sampled_uv_coords = uv_lambda_triple.rg;

          sampled_uv_coords.y = 1.0 - sampled_uv_coords.y;

          vec4 virtual_texturing_color = traverse_idx_hierarchy(lambda, sampled_uv_coords);

          gua_color = virtual_texturing_color.rgb;




         }


      ",
      "uniforms" :
      [
        {
          "name" : "wappen_vt",
          "type" : "sampler2D",
          "value" : "1"
        }
      ]
    }


  ]

}
