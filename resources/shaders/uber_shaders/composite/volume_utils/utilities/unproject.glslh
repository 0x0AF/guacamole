vec3
unproject_depth(in sampler2D depth_image, in vec2 coord, in mat4 mvp)
{
    float d  = texelFetch(depth_image, ivec2(coord.xy), 0).r;
    vec4 csp = vec4(coord.xy / vec2(textureSize(depth_image, 0)), d, 1.0) * 2.0 - 1.0;
    vec4 osp = mvp * csp;
    osp     /= osp.w;

    return osp.xyz;
}

float get_depth_z(vec3 world_position) {
    vec4 pos = gua_projection_matrix * gua_view_matrix * vec4(world_position, 1.0);
    float ndc = pos.z / pos.w;
    return ((gl_DepthRange.diff * ndc) + gl_DepthRange.near + gl_DepthRange.far) / 2.0;
}

float get_depth_linear(float depth_buffer_d) {
    float ndc = (depth_buffer_d * 2.0 - gl_DepthRange.near - gl_DepthRange.far) / gl_DepthRange.diff;
    vec4 enit = vec4(gl_FragCoord.xy * 2.0 - vec2(1.0), ndc, 1.0);
    vec4 enit_inv = (gua_inverse_projection_view_matrix * enit);
    enit_inv /= enit_inv.w;
    return enit_inv.z;
}

vec3 get_object_world_position_from_depth(float depth_buffer_d) {

    float ndc = (depth_buffer_d * 2.0 - gl_DepthRange.near - gl_DepthRange.far) / gl_DepthRange.diff;
    vec4 enit = vec4(gl_FragCoord.xy * 2.0 - vec2(1.0), ndc, 1.0);
    vec4 enit_inv = (gua_inverse_projection_view_matrix * enit);
    return enit_inv.xyz;
}
