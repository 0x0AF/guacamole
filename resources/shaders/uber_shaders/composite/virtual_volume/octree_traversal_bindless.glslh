
#ifndef SCM_LDATA_VVOLUME_RAY_CAST_OCTREE_TRAVERSAL_BINDLESS_GLSLH_INCLUDED
#define SCM_LDATA_VVOLUME_RAY_CAST_OCTREE_TRAVERSAL_BINDLESS_GLSLH_INCLUDED

#include </scm/data/vtexture/vtexture.glslh>

#extension GL_NV_bindless_texture : require
#extension GL_NV_gpu_shader5      : require

struct ray_cast_trav_info {
    sampler3D vpage;
    uint64_t  vpage_hndl;

    uvec2   vpage_index_data;
    int     vpage_level;
    vec3    vpage_coord;

    vec3    octree_node_pos;
    vec3    octree_nodes_per_level;
}; // struct ray_cast_trav_info

void ray_cast_octree_traverse(in vtexture3D          vtex,       // virtual texture decriptor struct
                              in vec3                vtex_coord, // virtual texture coordinate
                              in float               target_lod,
                              inout ray_cast_trav_info trav_info)
{
    //precision highp   float;
    //precision mediump int;

    float target_level_ceil = ceil(target_lod);
    
    // TODO test with smaller integer type or float type...!
    // traversal termination variables
    int mlvl = int(target_level_ceil);
    int clvl = 0;

    //vtex_coord = clamp(vtex_coord, vec3(0.0), vec3(1.0));

    // initialize and sample the root node
    vec3  node_spos = 2.0 * vtex_coord;
    int   node_off  = int(floor(node_spos.x)) + 2 * int(floor(node_spos.y)) + 4 * int(floor(node_spos.z));
    uvec2 idx_data  = texelFetch(vtex.octree_enc_00, node_off).xy;
    
    // traversal
    while (   (idx_data.y > 0u) // we are not at a leaf
           && (clvl < mlvl))    // we are still over our target lod
    {
        int buff_no = node_off + 8 * int(idx_data.y);
        idx_data    = texelFetch(vtex.octree_enc_00, buff_no).xy;
        node_spos   = 2.0 * fract(node_spos);
        node_off    =       int(floor(node_spos.x))
                      + 2 * int(floor(node_spos.y))
                      + 4 * int(floor(node_spos.z));
        ++clvl;
    }

    uvec2     page_tex_enc = texelFetch(vtex.page_atlas.atlas_textures, int(idx_data.x)).xy;
    trav_info.vpage_hndl   = packUint2x32(page_tex_enc);
    trav_info.vpage        = sampler3D(0ul);

    trav_info.vpage_index_data = idx_data;
    trav_info.vpage_level      = clvl;

    trav_info.octree_nodes_per_level = vec3(float(1 << clvl));
    trav_info.octree_node_pos        = floor(vtex_coord * trav_info.octree_nodes_per_level);

    // scale current brick space sample position into brick core space
    trav_info.vpage_coord          = vtex.page_border_size + node_spos * 0.5 * vtex.page_core_size;
}

#endif // SCM_LDATA_VVOLUME_RAY_CAST_OCTREE_TRAVERSAL_BINDLESS_GLSLH_INCLUDED
